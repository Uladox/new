#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct node{
	struct node *right;
	struct node *down;
	char *tag;
};

void add_node(struct node *argnode, char *argstr)
{
	argnode->right = (struct node *) malloc(sizeof(struct node));
	argnode->right->tag = malloc(strlen(argstr)+1);
	strcpy(argnode->right->tag, argstr);
	argnode->right->right = NULL;
	argnode->right->down = NULL;
}

//makes first string exactly equivalent (size and content) to second
void str_new(char *argstr, char *value)
{
	if (argstr == NULL){
		argstr = malloc(strlen(value) + 1);
		strcpy(argstr, value);
	} else {
//		argstr = realloc(argstr, strlen(value) + 1);
		strcpy(argstr, value);	
	}
}

//returns string without whitespace at beggining
char *rmv_spc(char* argstr)
{
	char *rstpnt = argstr;
	while (isspace(*argstr))
		argstr++;	
	char *tempstr = malloc(strlen(argstr) + 1);	
	strcpy(tempstr, argstr);
	argstr = rstpnt;
	return tempstr;
}

//returns first section of string before first whitespace
char *spc_slt(char* argstr)
{
	char *rstpnt = argstr;
	while (!isspace(*argstr) && (*argstr) != '\0')
		argstr++;
	int token_s = strlen(rstpnt) - strlen(argstr);
	char* tempstr = malloc(token_s + 1);
	argstr = rstpnt;
	strncpy(tempstr, argstr, token_s);
	return tempstr;
}

//cuts off size from beggining of string
void rem_str_ft(char *argstr, int size)
{
	char *rstpnt = argstr;
	char *tempstr = malloc(1 + (strlen(argstr) - size));
	int i;
	for (i = 0; i != size; i++)
		argstr++;
	int e = strlen(argstr);
	for (i = 0; i != e; i++){
		*tempstr = *argstr;
		tempstr++;
		argstr++;
	}
	*tempstr = '\0';
	for (i = 0; i != e; i++)
		tempstr--;	
	argstr = rstpnt;
	str_new(argstr, tempstr);
	free(tempstr);
}

char *rmv_slt(char *argstr)
{
	char *fnt_cln = rmv_spc(argstr);
	char *spl_str = spc_slt(fnt_cln);
	rem_str_ft(argstr, (strlen(argstr) - strlen(fnt_cln)) + strlen(spl_str));
	free(fnt_cln);
	return spl_str;
}

void list_form(struct node *argnode, char *argstr)
{
	struct node *currnode = argnode;
	while(strlen(argstr)!=0){
		char *tempchar = rmv_slt(argstr);
		if(strlen(argstr)!=0){
			add_node(currnode, tempchar);			
			currnode = currnode->right;
		}
		if(tempchar != NULL)
			free(tempchar);		
	}	
}
void free_node(struct node *argnode)
{
	if(argnode->tag != NULL){
		free(argnode->tag);
		argnode->tag = NULL;
	}
	if(argnode->down != NULL){
		free_node(argnode->down);
		argnode->down = NULL;
	}
	if(argnode->right != NULL){
		free_node(argnode->right);
		argnode->right = NULL;
	}
	free(argnode);
	argnode = NULL;
}
int main(void)
{
	struct node *n;
	n = (struct node *) malloc(sizeof(struct node));
/*
	struct node *a;
	a = (struct node *) malloc(sizeof(struct node));
	add_node(a, "stuff");
	printf("%s", a->right->tag);
	free(a->right->tag);
	free(a->right);
	free(a);
*/
char *a = malloc(11);
strcpy(a, " a b c    "); 
//char *b = rmv_slt(a);
list_form(n, a);
printf("%s", n->right->right->right->tag);
/*
free(n->right->tag);
free(n->right->right->tag);
free(n->right->right->right->tag);

free(n->right->right->right);
free(n->right->right);
free(n->right);

free(n);
free(a);
*/

free_node(n);
free(a);
}
